{
    "env": {
        "browser": true,
        "es2021": true
    },
    /**
     * 확장 된 구성 파일은 다른 구성 파일의 모든 특성 (규칙, 플러그인 및 언어 옵션 포함)을
     * 상속하고 모든 옵션을 수정할 수 있습니다.
     * 결과적으로 아래와 같이 세 가지 구성이 있습니다:
     * - Base config: 확장 된 구성입니다.
     * - 파생 구성: 기본 구성을 확장하는 구성입니다.
     * - 결과 실제 구성: 파생 구성을 기본 구성에 병합 한 결과입니다.
     */
    "extends": [
        "eslint:recommended",
        "airbnb-base",
        "prettier",
        "plugin:prettier/recommended"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 12,
        "sourceType": "module"
    },
    "plugins": [
        "@typescript-eslint",
        "prettier",
        "import"
    ],
    /**
     * Rule 속성은 다음 중 하나를 수행하여 규칙 집합을 확장 (또는 재정의) 할 수 있습니다:
     * - 추가 규칙 활성화
     * - 옵션을 변경하지 않고 상속 된 규칙의 심각도 변경
     * - 기본 구성의 규칙에 대한 옵션 재정의
     */
    "rules": {
        "prettier/prettier": "error",
        "arrow-body-style": "off",
        "prefer-arrow-callback": "off",
        "import/extensions": [
            "error",
            "ignorePackages",
            {
                "js": "never",
                "jsx": "never",
                "ts": "never",
                "tsx": "never"
            }
        ]
    },
    /**
     * Settings
     * ESLint는 구성 파일에 공유 설정 추가를 지원합니다.
     * 플러그인은 설정을 사용하여 모든 규칙에서 공유해야하는 정보를 지정합니다.
     * ESLint 구성 파일에 설정 개체를 추가 할 수 있으며 실행중인 모든 규칙에 제공됩니다.
     * 이는 사용자 지정 규칙을 추가하고 동일한 정보에 액세스하고 쉽게 구성 할 수 있도록하려는 경우 유용 할 수 있습니다.
     */
    "settings": {
        "import/resolver": {
            "node": {
                "paths": [
                    "src"
                ],
                "extensions": [
                    ".js",
                    ".jsx",
                    ".ts",
                    ".tsx"
                ]
            }
        }
    }
}